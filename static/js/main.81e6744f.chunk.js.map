{"version":3,"sources":["logo.svg","assets/image4.jpg","Card.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Card","props","className","src","image1","alt","align","href","App","handleNewUserMessage","newMessage","addResponseMessage","renderCustomComponent","Cards","this","profileAvatar","logo","title","subtitle","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0FAAAA,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,wQCyC5BC,G,MAlCF,SAAAC,GACT,OACI,yBAAKC,UAAU,qBAEX,yBAAKA,UAAU,OACV,yBAAKA,UAAU,YACZ,yBAAKC,IAAKC,IAAQC,IAAI,SAASH,UAAU,yBAE5C,yBAAKA,UAAU,iBACZ,wBAAIA,UAAU,eAAeI,MAAM,UAAnC,oBAUX,yBAAKJ,UAAU,wBAEX,uBAAGA,UAAU,4BAAb,yEAGA,uBAAGK,KAAK,IAAIL,UAAU,wBAAtB,gBAEA,uBAAGK,KAAK,IAAIL,UAAU,wBAAtB,eAEA,uBAAGK,KAAK,IAAIL,UAAU,wBAAtB,qBC4DEM,E,2MA/EbC,qBAAuB,SAACC,EAAWT,GAWhB,OAAbS,GACFC,6BAAmB,MAEJ,UAAbD,GACFC,6BAAmB,SAEJ,gBAAbD,GACFC,6BAAmB,mBAEJ,SAAbD,GACFC,6BAAmB,sBAEJ,SAAbD,GACFC,6BAAmB,aAEJ,WAAbD,GACFC,6BAAmB,kCAEJ,wBAAbD,GACFC,6BAAmB,kBAEJ,qBAAbD,GACFC,6BAAmB,YAEJ,sBAAbD,GACFC,6BAAmB,yBAEJ,qBAAbD,GACFC,6BAAmB,iBAEJ,wBAAbD,GACFC,6BAAmB,4BAEJ,sBAAbD,GACFC,6BAAmB,6BAGJ,qBAAbD,IAEAC,6BAAmB,wCACnBC,gCAAsBC,K,iFAvDVZ,GAChBU,6BAAmB,oC,+BAkEnB,OACE,yBAAKT,UAAU,OACZ,uCACA,yCACD,kBAAC,SAAD,CAEEO,qBAAsBK,KAAKL,qBAC3BM,cAAeC,IACfC,MAAM,oBACNC,SAAS,kC,GA/EDC,aCGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.81e6744f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","module.exports = __webpack_public_path__ + \"static/media/image4.bbb1449c.jpg\";","/* eslint-disable jsx-a11y/anchor-is-valid */\n/* eslint-disable jsx-a11y/img-redundant-alt */\n\n\nimport React from \"react\";\nimport image1 from './assets/image4.jpg';\nimport './Card.css';\nconst Card = props =>{\n    return (\n        <div className='card text-center '>\n          \n            <div className=\"row\">\n                 <div className=\"col-md-5\" >\n                    <img src={image1} alt=\"Avatar\" className='image  card-img-top'/>\n                 </div>\n                 <div className=\"name col-md-7\">\n                    <h4 className=\"card = title\" align='center'>\n                    Shraddha Gupta\n                </h4>\n               \n                 </div>\n            </div>\n\n         \n            \n         \n         <div className=\"card-body text-dark \">\n             \n             <p className=\"card-text text-secondery\">\n                 I'm a  python devloper having 3 years of experince in an IT Indusrty. \n             </p>\n             <a href=\"#\" className=\"btn btn-outline-info\">View Profile</a>\n\n             <a href=\"#\" className=\"btn btn-outline-info\">Set Meeting</a>\n\n             <a href=\"#\" className=\"btn btn-outline-info\">Bot Interview</a>\n         </div>\n\n        </div>\n    );\n};\nexport default Card;","import React, { Component } from 'react';\nimport { Widget, addResponseMessage,renderCustomComponent } from 'react-chat-widget';\n// import { Chat, HeroCard } from '@progress/kendo-react-conversational-ui';\n// import * as AdaptiveCards from \"adaptivecards\";\nimport 'react-chat-widget/lib/styles.css';\n import './App.css'\nimport logo from './logo.svg';\nimport Cards from './Card';\n\nclass App extends Component {\n \n\n  componentDidMount(props) {\n    addResponseMessage(\"Welcome Type python developer!\");\n  }\n \n  handleNewUserMessage = (newMessage,props) => {\n\n\n   \n\n    // console.log(`New message incoming! ${newMessage}`);\n    // let adaptiveCard = new AdaptiveCards.AdaptiveCard();\n    //  let attachment = newMessage.item;\n    // let adaptiveCard = new AdaptiveCards.AdaptiveCard();\n    // var n = newMessage.search('python developer');\n  \n    if( newMessage==='hi'){\n      addResponseMessage('hi');\n    }\n    if( newMessage==='hello'){\n      addResponseMessage('hello');\n    }\n    if( newMessage==='how are you'){\n      addResponseMessage('fine, and you ?');\n    }\n    if( newMessage==='fine'){\n      addResponseMessage('glad to here that!');\n    }\n    if( newMessage==='good'){\n      addResponseMessage('its nice!');\n    }\n    if( newMessage==='thanks'){\n      addResponseMessage('welcome,! type python devloper');\n    }\n    if( newMessage==='my name is shivnath'){\n      addResponseMessage('hello shivnath');\n    }\n    if( newMessage==='my name is tejas'){\n      addResponseMessage('hi tejas');\n    }\n    if( newMessage==='my name is prasad'){\n      addResponseMessage('your are great prasad');\n    }\n    if( newMessage==='my name is pooja'){\n      addResponseMessage(' ooh hi pooja');\n    }\n    if( newMessage==='my name is vrushali'){\n      addResponseMessage('your wonderfull vrushali');\n    }\n    if( newMessage==='what is your name'){\n      addResponseMessage('Im ChatBot from Telemerge');\n    }\n   \n    if (newMessage==='python developer'){\n        // adaptiveCard.parse(attachment.content);\n        addResponseMessage(\"Here Are My best Suggestions For You\");\n        renderCustomComponent(Cards);                            // ) ;\n      // \"ok there are no results found now I'll inform you as soon as I found them.\"\n    }\n    \n\n      \n\n    \n    \n  }\n \n  render() {\n    return (\n      <div className=\"App\">\n         <h1>Chatbot</h1>\n         <h5>Telemerge</h5>\n        <Widget\n          \n          handleNewUserMessage={this.handleNewUserMessage}\n          profileAvatar={logo}\n          title=\"Telemerge Chatbot\"\n          subtitle=\"Welcome to Bot Recruiter\"\n        />\n      </div>\n    );\n  } \n}\n \nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}